package AliyunWebFC

import (
	"encoding/base64"
	"github.com/aliyun/fc-runtime-go-sdk/events"
	"github.com/danvei233/fchandler2go/AliyunWebFC/config"
	"github.com/danvei233/fchandler2go/AliyunWebFC/mock"
	"github.com/danvei233/fchandler2go/utills"
	"github.com/gin-gonic/gin"
	"strings"
)

func Recall(c *gin.Context, response *events.HTTPTriggerResponse, config config.Config) error {
	w := c.Writer
	// set default header
	w.Header().Set("Content-Type", "application/json")
	// skip internal headers
	for key, value := range response.Headers {
		if (strings.HasPrefix(key, "X-Fc-") == true) || utills.IsBadResHeader(key) {
			continue

		}

		w.Header().Set(key, strings.Replace(value, ",", ";", -1))
	}
	// set mock generated by mock.go
	w.Header().Set("X-Fc-Request-Id", mock.MakeFakeID(1, config))

	// if there is not a valid statusCode then return 200
	if response.StatusCode == 0 {
		w.WriteHeader(200)
	} else {
		w.WriteHeader(response.StatusCode)
	}

	if response.IsBase64Encoded && response.StatusCode != 0 {
		FinalRes, err := base64.URLEncoding.DecodeString(response.Body)
		if err != nil {
			c.String(500, err.Error())
		}
		_, err = w.Write(FinalRes)
		if err != nil {
			return err

		}
		return nil
	} else {
		_, err := w.Write([]byte(response.Body))
		if err != nil {
			return err
		}
		return nil
	}
}
